<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.fpi.mapper.user.UserMapper">
    <!--    마이페이지 내정보 상세보기-->
    <select id="detailUser">
        SELECT u1.*, c.category_name
        FROM (SELECT u.user_id,
                     u.user_name,
                     u.phone_number,
                     u.user_img,
                     u.email,
                     u.user_cash,
                     u.user_star_rate,
                     u.user_Pro_Approval,
                     l.region,
                     l.city,
                     cl.category_id
              FROM tbl_user u
                       JOIN tbl_location l ON u.location_id = l.location_id
                       JOIN tbl_category_list cl ON u.user_id = cl.user_id) u1
                 JOIN tbl_category c ON u1.category_id = c.category_id
        WHERE u1.user_id = #{userId}
    </select>


    <!--    회원가입 사용자 정보 조회,회원가입 되어있는 회원인지에 사용-->
    <select id="findByUserId">
        select *
        from tbl_user
        where user_id = #{userId}
    </select>
    <!--    회원가입,OAuth내 정보 저장-->
    <insert id="saveUser">
        insert into tbl_user (user_id, user_name, user_img, provider, role)
        values (#{userId}, #{userName}, #{userImg}, #{provider}, #{role})
    </insert>
    <!--    회원가입시 입력 폼-->
    <update id="updateUser">
        update tbl_user
        set user_name        = #{userName},
            PHONE_NUMBER     = #{phoneNumber},
            email=#{email},
            ROLE             = #{role},
            location_id=#{locationId},
            user_cash=0,
            USER_PRO_APPROVAL='NO'
        where user_id = #{userId}
    </update>

    <!--    회원 탈퇴-->
    <delete id="deleteUser">
        delete
        from tbl_user
        where user_id = #{userId}
          and user_name = #{userName}
    </delete>

    <!--    전문가에서 회원탈퇴시 유저의 USER_PRO_APPROVAL 를 no로 변경해줘야 함,헤더부분에서도 사용!-->
    <update id="editApproval">
        update TBL_USER
        set USER_PRO_APPROVAL = 'NO'
        where USER_ID = #{userId}
    </update>

    <!--    마이페이지 내정보 수정하기-->
    <update id="editUser">
        update tbl_user
        set phone_number = #{phoneNumber},
            location_id=#{locationId},
            email        = #{email}
        where user_id = #{userId}
    </update>
    <!--  선택한 카테고리 수정-->
    <update id="editCategory">
        update tbl_category_list
        set category_id = #{categoryId}
        where user_id = #{userId}
    </update>

    <!--    유저가 올리 견적 목록   -->
    <select id="selectUserUploadList" resultType="UserUploadListDTO">
        SELECT *
        FROM (
        SELECT ROWNUM AS RN, UPLOAD.*
        FROM (
        select TUU.USER_UPLOAD_ID, TUU.USER_ID, TUU.USER_UPLOAD_TITLE, TUU.USER_UPLOAD_DATE, TU.USER_STAR_RATE,
        TU.USER_NAME, ts.SERVICE_NAME , tu.USER_IMG
        from TBL_USER_UPLOAD TUU
        inner join TBL_USER TU
        on TUU.USER_ID = TU.USER_ID
        inner join TBL_SERVICE TS
        on tuu.SERVICE_ID = ts.SERVICE_ID
        inner join TBL_CATEGORY tg
        on tg.CATEGORY_ID = ts.CATEGORY_ID
        <where>
            <if test="'title'.equals(searchSubject)">
                <choose>
                    <when test="searchType == ''">
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%'
                    </when>
                    <when test='"1".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 1
                    </when>
                    <when test='"2".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 2
                    </when>
                    <when test='"3".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 3
                    </when>
                    <when test='"4".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 4
                    </when>
                    <when test='"5".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 5
                    </when>
                </choose>
            </if>
            <if test="'name'.equals(searchSubject)">
                <choose>
                    <when test="searchType == ''">
                        and TU.USER_NAME LIKE '%' || #{search} || '%'
                    </when>
                    <when test='"1".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 1
                    </when>
                    <when test='"2".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 2
                    </when>
                    <when test='"3".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 3
                    </when>
                    <when test='"4".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 4
                    </when>
                    <when test='"5".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 5
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY
        USER_UPLOAD_DATE DESC
        ) UPLOAD
        WHERE ROWNUM &lt;= #{endRow}
        )
        WHERE rn &gt; #{startRow}

    </select>

    <!--    유저가 올린 견적 갯수  -->
    <select id="countUserUpload">
        select count(*)
        from TBL_USER_UPLOAD TUU
        inner join TBL_SERVICE TS
        on TUU.SERVICE_ID = ts.SERVICE_ID
        inner join TBL_CATEGORY tg
        on tg.CATEGORY_ID = ts.CATEGORY_ID
        join TBL_USER tu on tuu.USER_ID=tu.USER_ID
        <where>
            <if test="'title'.equals(searchSubject)">
                <choose>
                    <when test="searchType == ''">
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%'
                    </when>
                    <when test='"1".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 1
                    </when>
                    <when test='"2".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 2
                    </when>
                    <when test='"3".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 3
                    </when>
                    <when test='"4".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 4
                    </when>
                    <when test='"5".equals(searchType)'>
                        and tuu.USER_UPLOAD_TITLE LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 5
                    </when>
                </choose>
            </if>
            <if test="'name'.equals(searchSubject)">
                <choose>
                    <when test="searchType == ''">
                        and TU.USER_NAME LIKE '%' || #{search} || '%'
                    </when>
                    <when test='"1".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 1
                    </when>
                    <when test='"2".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 2
                    </when>
                    <when test='"3".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 3
                    </when>
                    <when test='"4".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 4
                    </when>
                    <when test='"5".equals(searchType)'>
                        and TU.USER_NAME LIKE '%' || #{search} || '%' AND TG.CATEGORY_ID = 5
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <!--    유저가 올리 견적 상세보기  -->
    <select id="selectUserUploadDetail" resultType="UserUploadDetailDTO">
        SELECT TUU.USER_UPLOAD_ID
             , TUU.USER_UPLOAD_DATE
             , TC.CATEGORY_NAME
             , TS.SERVICE_NAME
             , TL.REGION
             , TL.CITY
             , TUU.USER_UPLOAD_CONTENT
             , TU.USER_STAR_RATE
             , TUU.USER_UPLOAD_ADDRESS
             , TUU.USER_UPLOAD_PAY_RANGE
             , TU.USER_NAME
             , TU.USER_ID
             , TUU.USER_UPLOAD_TITLE
             , TUU.USER_UPLOAD_PAY
        FROM TBL_USER_UPLOAD TUU
                 INNER JOIN TBL_SERVICE ts
                            ON TUU.SERVICE_ID = TS.SERVICE_ID
                 INNER JOIN TBL_CATEGORY tc
                            ON TS.CATEGORY_ID = TC.CATEGORY_ID
                 INNER JOIN TBL_USER TU
                            ON TU.USER_ID = TUU.USER_ID
                 INNER JOIN TBL_LOCATION tl
                            ON TU.LOCATION_ID = TL.LOCATION_ID
        WHERE TUU.USER_UPLOAD_ID = #{userUploadId}
    </select>


    <!--    회원 견적 올리기-->
    <!--    회원이 견적 올리기 다음 시퀀스 가져오기-->
    <select id="getUploadSeq" resultType="long">
        select SEQ_UPLOAD.nextval
        from dual
    </select>

    <!--    견적 작성 쿼리문-->
    <insert id="saveUserUpload">
        insert into TBL_USER_UPLOAD
        values (#{userUploadId}, #{userUploadTitle}, #{userUploadContent}, #{userUploadPay},
                #{userUploadPayRange}, sysdate, #{userUploadAddress}, #{userId}, #{serviceId})
    </insert>

    <!--    회원 위치 가져오기-->
    <select id="selectUserLocation" resultType="UserLocationDTO">
        select REGION, CITY, USER_NAME
        from tbl_user
                 inner join TBL_LOCATION
                            on tbl_user.LOCATION_ID = TBL_LOCATION.LOCATION_ID
        where TBL_USER.USER_ID = #{userId}
    </select>

    <!--    전뭄가 찾기를 통한 요청 보내기   -->
    <insert id="userRequest">
        insert into TBL_USER_REQUEST
        values (SEQ_REQUEST.nextval, #{userRequestPay}, #{userRequestContent},
                sysdate, 'PRE', #{userId}, #{proUploadId}, 0, 0)
    </insert>

    <!--    전문가가 올린 견적에 대해서 내가 보낸 요청이 있는 없는지 확인-->
    <select id="checkUserRequest" resultType="long">
        select count(*)
        from TBL_PRO_UPLOAD TPU
                 inner join TBL_USER_REQUEST TUR
                            on tpu.PRO_UPLOAD_ID = tur.PRO_UPLOAD_ID
                 inner join TBL_USER TU
                            on TUR.USER_ID = TU.USER_ID
        where tpu.PRO_UPLOAD_ID = #{proUploadId}
          and tur.USER_ID = #{userId}
    </select>

    <!--    유저가 회원에 대해 리뷰 작성하기  -->
    <select id="getReviewSeq" resultType="long">
        select SEQ_REVIEW.nextval
        from dual
    </select>

    <insert id="userWriteProReview">
        insert into TBL_PRO_REVIEW
        values (#{proReviewId}, #{proReviewTitle}, #{proReviewContent}, #{proReviewRate}, 100, sysdate,
                #{userId}, #{proId})
    </insert>

    <!--    수락하기 눌렀을때-->

    <update id="updateUserAccept">
        update TBL_PRO_REQUEST
        set PRO_REQUEST_PROGRESS = 'ING'
        where PRO_REQUEST_ID = #{proRequestId}
    </update>

    <!--    작업 완료 눌렀을때-->
    <update id="updateUserComplete">
        update TBL_PRO_REQUEST
        set PRO_REQUEST_PROGRESS = 'POST'
        where PRO_REQUEST_ID = #{proRequestId}
    </update>

    <!--   전문가가 보낸 요청에서 리뷰 작성하기 눌렀을때 업데이트   -->
    <update id="updateProRequestProReview">
        update TBL_PRO_REQUEST
        set CHECK_USER_REVIEW = 1
        where PRO_REQUEST_ID = #{proRequestId}
    </update>

    <!--   내가 보낸 요청에서 리뷰 작성하기 눌렀을때 업데이트   -->
    <update id="updateUserRequestProReview">
        update TBL_USER_REQUEST
        set CHECK_USER_REVIEW = 1
        where USER_REQUEST_ID = #{userRequestId}
    </update>

    <!--    유저가 전문가 신고하기-->
    <insert id="userAccusePro">
        insert into TBL_PRO_ACCUSE
        values (SEQ_ACCUSE.nextval, #{userAccuseContent}, #{userId}, #{proId})
    </insert>

    <!--    유저가 전문가 신고 할때 리퀘스트 아이디를 통해 프로 아이디 가져오기-->
    <select id="selectProIdByProRequestId" resultType="Long">
        select PRO_ID
        from TBL_PRO_REQUEST
        where PRO_REQUEST_ID = #{proRequestId}
    </select>

    <!--    프로가 올린 서비스를 통해 아이디 가져오기 -->
    <select id="selectProIdByUserRequestId" resultType="Long">
        select PRO_ID
        from TBL_USER_REQUEST
                 inner join TBL_PRO_UPLOAD
                            on TBL_USER_REQUEST.PRO_UPLOAD_ID = TBL_PRO_UPLOAD.PRO_UPLOAD_ID
        where TBL_USER_REQUEST.USER_REQUEST_ID = #{userRequestId}
    </select>

    <!--    &lt;!&ndash;    회원 별점 가져오기 &ndash;&gt;-->
    <!--    <select id="selectUserRate" resultType="Long">-->
    <!--        select round(avg(USR_REVIEW_RATE), 0)-->
    <!--        from TBL_USER_REVIEW-->
    <!--        where USER_ID = #{userId}-->
    <!--    </select>-->

    <!--    &lt;!&ndash;    회원 별점 넣어주기 &ndash;&gt;-->
    <!--    <update id="updateUserRate">-->
    <!--        update TBL_USER-->
    <!--        set USER_STAR_RATE = #{userStarRate}-->
    <!--        where USER_ID = #{userId}-->

    <!--    </update>-->

    <!--    전문가 별점 가져오기-->
    <select id="selectProRate" resultType="Long">
        select round(avg(PRO_REVIEW_RATE), 0)
        from TBL_PRO_REVIEW
        where PRO_ID = #{proId}
    </select>

    <!--    전문가 별점 넣어주기 -->
    <update id="updateProRate">
        update TBL_PRO
        set PRO_STAR_RATE = #{proStarRate}
        where PRO_ID = #{proId}

    </update>

    <!--    회원의 리뷰 갯수 가져오기 -->
    <select id="selectUserReviewCnt" resultType="Long">
        select count(*)
        from TBL_USER_REVIEW
        where USER_ID = #{userId}
    </select>

    <!--    <update id="updateUserUpload">-->
    <!--        update TBL_USER_UPLOAD-->
    <!--        set USER_UPLOAD_TITLE=#{userUploadTitle},USER_UPLOAD_CONTENT=#{userUploadContent},USER_UPLOAD_PAY=#{userUploadPay}-->
    <!--        where user_uploadID =#{userUploadId}-->
    <!--&#45;&#45;         values (#{userUploadId}, #{userUploadTitle}, #{userUploadContent}, #{userUploadPay},-->
    <!--&#45;&#45;                 #{userUploadPayRange}, sysdate, #{userUploadAddress}, #{userId}, #{serviceId})-->
    <!--    </update>-->
    <select id="userUploadList">
        SELECT *
        FROM (SELECT ROWNUM AS RN, upload.*
              FROM (SELECT TUU.*,
                           ts.SERVICE_NAME,
                           UUF.USER_UPLOAD_FILE_ROUTE,
                           ROW_NUMBER() OVER (PARTITION BY uuf.user_UPLOAD_ID ORDER BY uuf.user_UPLOAD_FILE_ROUTE) AS route
                    FROM TBL_USER_UPLOAD TUU
                             INNER JOIN TBL_USER TU
                                        ON TUU.USER_ID = TU.USER_ID
                             INNER JOIN TBL_SERVICE TS
                                        ON TUU.SERVICE_ID = TS.SERVICE_ID
                             INNER JOIN TBL_CATEGORY TG
                                        ON TG.CATEGORY_ID = TS.CATEGORY_ID
                             LEFT JOIN TBL_USER_UPLOAD_FILE UUF
                                       ON TUU.USER_UPLOAD_ID = UUF.USER_UPLOAD_ID
                    WHERE TUU.USER_ID = #{userId}
                    ORDER BY TUU.USER_UPLOAD_ID DESC) upload
              WHERE ROWNUM &lt;= #{endRow}
                AND (route = 1 or USER_UPLOAD_FILE_ROUTE is null))
        WHERE RN &gt; #{startRow}
    </select>
    <select id="countUserUploadList">
        select count(*)
        from TBL_USER_UPLOAD
        where USER_ID = #{userId}
    </select>
</mapper>